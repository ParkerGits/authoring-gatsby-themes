{"version":3,"sources":["../../src/utils/develop-proxy.ts"],"names":["noop","startDevelopProxy","input","shouldServeRestartingScreen","proxy","httpProxy","createProxyServer","target","targetPort","changeOrigin","preserveHeaderKeyCase","autoRewrite","ws","on","server","req","res","url","programPath","then","services","setHeader","end","JSON","stringify","fs","readFileSync","require","resolve","restartingScreen","web","socket","head","listen","proxyPort","serveRestartingScreen","serveSite"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAQA,MAAMA,IAAI,GAAG,MAAY,CAAE,CAA3B;;AAEO,MAAMC,iBAAiB,GAAIC,KAAD,IAIX;AACpB,MAAIC,2BAA2B,GAAG,KAAlC;;AAEA,QAAMC,KAAK,GAAGC,mBAAUC,iBAAV,CAA4B;AACxCC,IAAAA,MAAM,EAAG,oBAAmBL,KAAK,CAACM,UAAW,EADL;AAExCC,IAAAA,YAAY,EAAE,IAF0B;AAGxCC,IAAAA,qBAAqB,EAAE,IAHiB;AAIxCC,IAAAA,WAAW,EAAE,IAJ2B;AAKxCC,IAAAA,EAAE,EAAE;AALoC,GAA5B,CAAd,CAHoB,CAWpB;AACA;;;AACAR,EAAAA,KAAK,CAACS,EAAN,CAAU,OAAV,EAAkBb,IAAlB;AAEA,QAAMc,MAAM,GAAG,wBAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxC;AACA,QAAID,GAAG,CAACE,GAAJ,KAAa,cAAjB,EAAgC;AAC9B,oCAAYf,KAAK,CAACgB,WAAlB,EAA+BC,IAA/B,CAAoCC,QAAQ,IAAI;AAC9CJ,QAAAA,GAAG,CAACK,SAAJ,CAAe,cAAf,EAA+B,kBAA/B;AACAL,QAAAA,GAAG,CAACM,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAR;AACD,OAHD;AAIA;AACD;;AAED,QAAIL,GAAG,CAACE,GAAJ,KAAa,yBAAjB,EAA2C;AACzCD,MAAAA,GAAG,CAACM,GAAJ,CACEG,iBAAGC,YAAH,CAAgBC,OAAO,CAACC,OAAR,CAAiB,oCAAjB,CAAhB,CADF;AAGA;AACD;;AAED,QACEzB,2BAA2B,IAC3BY,GAAG,CAACE,GAAJ,KAAa,6BAFf,EAGE;AACAD,MAAAA,GAAG,CAACM,GAAJ,CAAQO,yBAAR;AACA;AACD;;AAEDzB,IAAAA,KAAK,CAAC0B,GAAN,CAAUf,GAAV,EAAeC,GAAf;AACD,GA1Bc,CAAf;AA4BAF,EAAAA,MAAM,CAACD,EAAP,CAAW,SAAX,EAAqB,UAAUE,GAAV,EAAegB,MAAf,EAAuBC,IAAvB,EAA6B;AAChD5B,IAAAA,KAAK,CAACQ,EAAN,CAASG,GAAT,EAAcgB,MAAd,EAAsBC,IAAtB;AACD,GAFD;AAIAlB,EAAAA,MAAM,CAACmB,MAAP,CAAc/B,KAAK,CAACgC,SAApB;AAEA,SAAO;AACLpB,IAAAA,MADK;AAELqB,IAAAA,qBAAqB,EAAE,MAAY;AACjChC,MAAAA,2BAA2B,GAAG,IAA9B;AACD,KAJI;AAKLiC,IAAAA,SAAS,EAAE,MAAY;AACrBjC,MAAAA,2BAA2B,GAAG,KAA9B;AACD;AAPI,GAAP;AASD,CA9DM","sourcesContent":["import { createServer } from \"http\"\nimport httpProxy from \"http-proxy\"\nimport fs from \"fs-extra\"\nimport { getServices } from \"gatsby-core-utils/dist/service-lock\"\nimport restartingScreen from \"./restarting-screen\"\n\ninterface IProxyControls {\n  serveRestartingScreen: () => void\n  serveSite: () => void\n  server: any\n}\n\nconst noop = (): void => {}\n\nexport const startDevelopProxy = (input: {\n  proxyPort: number\n  targetPort: number\n  programPath: string\n}): IProxyControls => {\n  let shouldServeRestartingScreen = false\n\n  const proxy = httpProxy.createProxyServer({\n    target: `http://localhost:${input.targetPort}`,\n    changeOrigin: true,\n    preserveHeaderKeyCase: true,\n    autoRewrite: true,\n    ws: true,\n  })\n\n  // Noop on proxy errors, as this throws a bunch of \"Socket hang up\"\n  // ones whenever the page is refreshed\n  proxy.on(`error`, noop)\n\n  const server = createServer((req, res) => {\n    // Add a route at localhost:8000/___services for service discovery\n    if (req.url === `/___services`) {\n      getServices(input.programPath).then(services => {\n        res.setHeader(`Content-Type`, `application/json`)\n        res.end(JSON.stringify(services))\n      })\n      return\n    }\n\n    if (req.url === `/socket.io/socket.io.js`) {\n      res.end(\n        fs.readFileSync(require.resolve(`socket.io-client/dist/socket.io.js`))\n      )\n      return\n    }\n\n    if (\n      shouldServeRestartingScreen ||\n      req.url === `/___debug-restarting-screen`\n    ) {\n      res.end(restartingScreen)\n      return\n    }\n\n    proxy.web(req, res)\n  })\n\n  server.on(`upgrade`, function (req, socket, head) {\n    proxy.ws(req, socket, head)\n  })\n\n  server.listen(input.proxyPort)\n\n  return {\n    server,\n    serveRestartingScreen: (): void => {\n      shouldServeRestartingScreen = true\n    },\n    serveSite: (): void => {\n      shouldServeRestartingScreen = false\n    },\n  }\n}\n"],"file":"develop-proxy.js"}