"use strict";

exports.__esModule = true;
exports.default = void 0;

var _themeUi = require("theme-ui");

/** @jsx jsx */
const lodash = require(`lodash`);

const React = require(`react`);

const {
  useState
} = require(`react`);

const MDX = require(`@mdx-js/runtime`).default;

const ansi2HTML = require(`ansi-html`);

const {
  createClient,
  useMutation,
  useSubscription,
  Provider,
  defaultExchanges,
  subscriptionExchange
} = require(`urql`);

const {
  SubscriptionClient
} = require(`subscriptions-transport-ws`);

const semver = require(`semver`);

const SelectInput = "select"; // Check for what version of React is loaded & warn if it's too low.

if (semver.lt(React.version, `16.8.0`)) {
  console.log(`Recipes works best with newer versions of React. Please file a bug report if you see this warning.`);
}

const PROJECT_ROOT = "/Users/kylemathews/projects/gatsby/starters/blog";
const Boxen = "div";
const Text = "p";
const Static = "div";
const Color = "span";

const Spinner = () => (0, _themeUi.jsx)("span", null, "Loading...");

const WelcomeMessage = () => (0, _themeUi.jsx)(React.Fragment, null, (0, _themeUi.jsx)(Boxen, {
  float: "left",
  padding: 1,
  margin: {
    bottom: 1,
    left: 2
  }
}, "Thank you for trying the experimental version of Gatsby Recipes!"), (0, _themeUi.jsx)(Div, {
  "margin-bottom": 2
}, "Please ask questions, share your recipes, report bugs, and subscribe for updates in our umbrella issue at https://github.com/gatsbyjs/gatsby/issues/22991"));

const RecipesList = ({
  setRecipe
}) => {
  const items = [{
    label: `Add a custom ESLint config`,
    value: `eslint.mdx`
  }, {
    label: `Add Jest`,
    value: `jest.mdx`
  }, {
    label: `Add Gatsby Theme Blog`,
    value: `gatsby-theme-blog`
  }, {
    label: `Add persistent layout component with gatsby-plugin-layout`,
    value: `gatsby-plugin-layout`
  }, {
    label: `Add Theme UI`,
    value: `theme-ui.mdx`
  }, {
    label: `Add Emotion`,
    value: `emotion.mdx`
  }, {
    label: `Add support for MDX Pages`,
    value: `mdx-pages.mdx`
  }, {
    label: `Add support for MDX Pages with images`,
    value: `mdx-images.mdx`
  }, {
    label: `Add Styled Components`,
    value: `styled-components.mdx`
  }, {
    label: `Add Tailwind`,
    value: `tailwindcss.mdx`
  }, {
    label: `Add Sass`,
    value: `sass.mdx`
  }, {
    label: `Add Typescript`,
    value: `typescript.mdx`
  }, {
    label: `Add Cypress testing`,
    value: `cypress.mdx`
  }, {
    label: `Add animated page transition support`,
    value: `animated-page-transitions.mdx`
  }, {
    label: `Add plugins to make site a PWA`,
    value: `pwa.mdx`
  }, {
    label: `Add React Helmet`,
    value: `gatsby-plugin-react-helmet.mdx`
  }, {
    label: `Add Storybook - JavaScript`,
    value: `storybook-js.mdx`
  }, {
    label: `Add Storybook - TypeScript`,
    value: `storybook-ts.mdx`
  } // TODO remaining recipes
  ];
  return (0, _themeUi.jsx)(SelectInput, {
    onChange: e => setRecipe(e.target.value)
  }, items.map(item => (0, _themeUi.jsx)("option", {
    key: item.value,
    value: item.value
  }, item.label)));
};

const Div = props => (0, _themeUi.jsx)("div", props);

const components = {
  inlineCode: props => (0, _themeUi.jsx)("code", props),
  Config: () => null,
  GatsbyPlugin: () => null,
  NPMPackageJson: () => null,
  NPMPackage: () => null,
  File: () => null,
  GatsbyShadowFile: () => null,
  NPMScript: () => null
};

const log = (label, textOrObj) => {
  console.log(label, textOrObj);
};

log(`started client`, `======================================= ${new Date().toJSON()}`);

const RecipeGui = ({
  recipe = `jest.mdx`,
  graphqlPort = 4000,
  projectRoot = PROJECT_ROOT
}) => {
  try {
    const GRAPHQL_ENDPOINT = `http://localhost:${graphqlPort}/graphql`;
    const subscriptionClient = new SubscriptionClient(`ws://localhost:${graphqlPort}/graphql`, {
      reconnect: true
    });
    let showRecipesList = false;

    if (!recipe) {
      showRecipesList = true;
    }

    const client = createClient({
      fetch,
      url: GRAPHQL_ENDPOINT,
      exchanges: [...defaultExchanges, subscriptionExchange({
        forwardSubscription(operation) {
          return subscriptionClient.request(operation);
        }

      })]
    });

    const RecipeInterpreter = () => {
      var _state$context$plan, _state$context$plan2;

      // eslint-disable-next-line
      const [localRecipe, setRecipe] = useState(recipe);
      const [subscriptionResponse] = useSubscription({
        query: `
          subscription {
            operation {
              state
            }
          }
        `
      }, (_prev, now) => now); // eslint-disable-next-line

      const [_, createOperation] = useMutation(`
        mutation ($recipePath: String!, $projectRoot: String!) {
          createOperation(recipePath: $recipePath, projectRoot: $projectRoot)
        }
      `); // eslint-disable-next-line

      const [__, sendEvent] = useMutation(`
        mutation($event: String!) {
          sendEvent(event: $event)
        }
      `);

      subscriptionClient.connectionCallback = async () => {
        if (!showRecipesList) {
          log(`createOperation`);

          try {
            await createOperation({
              recipePath: localRecipe,
              projectRoot
            });
          } catch (e) {
            log(`error creating operation`, e);
          }
        }
      };

      log(`subscriptionResponse`, subscriptionResponse);
      const state = subscriptionResponse.data && JSON.parse(subscriptionResponse.data.operation.state);
      log(`subscriptionResponse.data`, subscriptionResponse.data);

      function Wrapper({
        children
      }) {
        return (0, _themeUi.jsx)("div", {
          sx: {
            maxWidth: 1000,
            margin: `0 auto`
          }
        }, children);
      }

      if (showRecipesList) {
        return (0, _themeUi.jsx)(Wrapper, null, (0, _themeUi.jsx)(WelcomeMessage, null), (0, _themeUi.jsx)(Text, null, "Select a recipe to run"), (0, _themeUi.jsx)(RecipesList, {
          setRecipe: async recipeItem => {
            console.log(recipeItem);
            showRecipesList = false;

            try {
              await createOperation({
                recipePath: recipeItem,
                projectRoot
              });
            } catch (e) {
              log(`error creating operation`, e);
            }
          }
        }));
      }

      if (!state) {
        console.log("Loading recipe!");
        return (0, _themeUi.jsx)(Wrapper, null, (0, _themeUi.jsx)(Spinner, null), " Loading recipe");
      }

      console.log(state);
      console.log("!!!!!!");
      const isDone = state.value === `done`;

      if (state.value === `doneError`) {
        console.error(state);
      }

      if (true) {
        log(`state`, state);
        log(`plan`, state.context.plan);
        log(`stepResources`, state.context.stepResources);
      }

      const PresentStep = ({
        step
      }) => {
        // const isPlan = state.context.plan && state.context.plan.length > 0
        // const isPresetPlanState = state.value === `presentPlan`
        // const isRunningStep = state.value === `applyingPlan`
        // console.log(`PresentStep`, { isRunningStep, isPlan, isPresetPlanState })
        // if (isRunningStep) {
        // console.log("running step")
        // return null
        // }
        // if (!isPlan || !isPresetPlanState) {
        // return (
        // <Div margin-top={1}>
        // <button onClick={() => sendEvent({ event: `CONTINUE` })}>
        // Go!
        // </button>
        // </Div>
        // )
        // }
        //
        // {plan.map((p, i) => (
        // <Div margin-top={1} key={`${p.resourceName} plan ${i}`}>
        // <Text>{p.resourceName}:</Text>
        // <Text> * {p.describe}</Text>
        // {p.diff && p.diff !== `` && (
        // <>
        // <Text>---</Text>
        // <pre
        // sx={{
        // lineHeight: 0.7,
        // background: `#f5f3f2`,
        // padding: [3],
        // "& > span": {
        // display: `block`,
        // },
        // }}
        // dangerouslySetInnerHTML={{ __html: ansi2HTML(p.diff) }}
        // />
        // <Text>---</Text>
        // </>
        // )}
        // </Div>
        // ))}
        // <Div margin-top={1}>
        // <button onClick={() => sendEvent({ event: "CONTINUE" })}>
        // Go!
        // </button>
        // </Div>
        return (0, _themeUi.jsx)(Div, null, (0, _themeUi.jsx)(Text, {
          "margin-bottom": 2
        }, "Proposed changes"));
      };

      const RunningStep = ({
        state
      }) => {
        const isPlan = state.context.plan && state.context.plan.length > 0;
        const isRunningStep = state.value === `applyingPlan`;

        if (!isPlan || !isRunningStep) {
          return null;
        }

        return (0, _themeUi.jsx)(Div, null, state.context.plan.map((p, i) => (0, _themeUi.jsx)(Div, {
          key: `${p.resourceName}-${i}`
        }, (0, _themeUi.jsx)(Text, null, p.resourceName, ":"), (0, _themeUi.jsx)(Text, null, ` `, (0, _themeUi.jsx)(Spinner, null), " ", p.describe, ` `, state.context.elapsed > 0 && (0, _themeUi.jsx)(Text, null, "(", state.context.elapsed / 1000, "s elapsed)")))));
      };

      const Error = ({
        state
      }) => {
        log(`errors`, state);

        if (state && state.context && state.context.error) {
          return (0, _themeUi.jsx)(Color, {
            red: true
          }, JSON.stringify(state.context.error, null, 2));
        }

        return null;
      };

      if (state.value === `doneError`) {
        return (0, _themeUi.jsx)(Error, {
          width: "100%",
          state: state
        });
      }

      const staticMessages = {};

      for (let step = 0; step < state.context.currentStep; step++) {
        staticMessages[step] = [{
          type: `mdx`,
          key: `mdx-${step}`,
          value: state.context.steps[step]
        }];
      }

      lodash.flattenDeep(state.context.stepResources).forEach((res, i) => {
        staticMessages[res._currentStep].push({
          type: `resource`,
          key: `finished-stuff-${i}`,
          value: res._message
        });
      });
      log(`staticMessages`, staticMessages);

      if (isDone) {
        process.nextTick(() => {
          subscriptionClient.close();
          log("The recipe finished successfully");
          lodash.flattenDeep(state.context.stepResources).forEach((res, i) => {
            log(`✅ ${res._message}\n`);
          });
        });
      }

      return (0, _themeUi.jsx)(Wrapper, null, (0, _themeUi.jsx)(Div, null), state.context.currentStep === 0 && (0, _themeUi.jsx)(WelcomeMessage, null), (0, _themeUi.jsx)("br", null), (0, _themeUi.jsx)("h2", null, "Proposed changes"), (0, _themeUi.jsx)("button", null, "Apply changes"), (0, _themeUi.jsx)("div", null, "count ", (_state$context$plan = state.context.plan) === null || _state$context$plan === void 0 ? void 0 : _state$context$plan.length), (0, _themeUi.jsx)("div", {
        sx: {
          marginBottom: 4
        }
      }, (_state$context$plan2 = state.context.plan) === null || _state$context$plan2 === void 0 ? void 0 : _state$context$plan2.map(p => (0, _themeUi.jsx)("div", null, p.resourceName, " \u2014 ", p.describe))), state.context.steps.map((step, i) => {
        return (0, _themeUi.jsx)("div", null, (0, _themeUi.jsx)("h4", {
          sx: {
            marginBottom: 3,
            marginTop: 0
          }
        }, i + 1, "/", state.context.steps.length), (0, _themeUi.jsx)("div", {
          key: `step-${i}`,
          sx: {
            border: `1px solid`,
            marginBottom: 4,
            padding: 3,
            borderRadius: 20,
            "& > h1": {
              marginTop: 0
            }
          }
        }, (0, _themeUi.jsx)(MDX, {
          components: components
        }, step), (0, _themeUi.jsx)(PresentStep, {
          step: step
        })));
      }));
    };

    const Wrapper = () => (0, _themeUi.jsx)(React.Fragment, null, (0, _themeUi.jsx)(Provider, {
      value: client
    }, (0, _themeUi.jsx)(Text, null, ` `), (0, _themeUi.jsx)(RecipeInterpreter, null)));

    const Recipe = () => (0, _themeUi.jsx)(Wrapper, null);

    return (0, _themeUi.jsx)(Recipe, null);
  } catch (e) {
    log(e);
  }
};

var _default = () => (0, _themeUi.jsx)(RecipeGui, null);

exports.default = _default;